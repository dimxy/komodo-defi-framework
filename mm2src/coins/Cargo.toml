[package]
name = "coins"
version = "0.1.0"
edition = "2018"

[features]
zhtlc-native-tests = []
enable-sia = [
	"dep:reqwest",
	"dep:blake2b_simd",
	"dep:sia-rust"
]
default = []
run-docker-tests = []
for-tests = ["dep:mocktopus"]
new-db-arch = ["mm2_core/new-db-arch"]

# Temporary feature for implementing IBC wrap/unwrap mechanism and will be removed
# once we consider it as stable.
ibc-routing-for-swaps = []

[lib]
path = "lp_coins.rs"
doctest = false

[dependencies]
async-std = { workspace = true, features = ["unstable"] }
async-trait.workspace = true 
base64.workspace = true
bip32.workspace = true
bitcoin_hashes.workspace = true
bitcrypto = { path = "../mm2_bitcoin/crypto" }
blake2b_simd = { workspace = true, optional = true }
bs58.workspace = true
byteorder.workspace = true
bytes.workspace = true
cfg-if.workspace = true
chain = { path = "../mm2_bitcoin/chain" }
chrono = { workspace = true, "features" = ["serde"] }
common = { path = "../common" }
compatible-time.workspace = true
cosmrs.workspace = true
crossbeam.workspace = true
crypto = { path = "../crypto" }
db_common = { path = "../db_common" }
derive_more.workspace = true
ed25519-dalek.workspace = true
enum_derives = { path = "../derives/enum_derives" }
kdf_walletconnect = { path = "../kdf_walletconnect" }
ethabi.workspace = true
ethcore-transaction.workspace = true
ethereum-types.workspace = true
ethkey.workspace = true
futures01.workspace = true
futures-util.workspace = true
futures-ticker.workspace = true
futures = { workspace = true, features = ["compat", "async-await"] }
group.workspace = true
gstuff.workspace = true 
hex.workspace = true
http.workspace = true
itertools = { workspace = true, features = ["use_std"] }
jsonrpc-core.workspace = true
jubjub.workspace = true
keys = { path = "../mm2_bitcoin/keys" }
lazy_static.workspace = true
libc.workspace = true
nom.workspace = true
mm2_core = { path = "../mm2_core" }
mm2_err_handle = { path = "../mm2_err_handle" }
mm2_event_stream = { path = "../mm2_event_stream" }
mm2_io = { path = "../mm2_io" }
mm2_metrics = { path = "../mm2_metrics" }
mm2_net = { path = "../mm2_net" }
mm2_number = { path = "../mm2_number"}
mm2_p2p = { path = "../mm2_p2p", default-features = false }
mm2_rpc = { path = "../mm2_rpc" }
mm2_state_machine = { path = "../mm2_state_machine" }
mocktopus = { workspace =  true, optional = true }
num-traits.workspace = true
parking_lot = { workspace = true, features = ["nightly"] }
primitives = { path = "../mm2_bitcoin/primitives" }
prost.workspace = true
protobuf.workspace = true
proxy_signature = { path = "../proxy_signature" }
rand = { workspace = true, features = ["std", "small_rng"] }
regex.workspace = true
reqwest = { workspace = true, optional = true }
rlp.workspace = true
rmp-serde.workspace = true
rpc = { path = "../mm2_bitcoin/rpc" }
rpc_task = { path = "../rpc_task" }
script = { path = "../mm2_bitcoin/script" }
secp256k1.workspace = true 
ser_error = { path = "../derives/ser_error" }
ser_error_derive = { path = "../derives/ser_error_derive" }
serde.workspace = true
serde_derive.workspace = true
serde_json = { workspace = true, features = ["preserve_order", "raw_value"] }
serde_with.workspace = true
serialization = { path = "../mm2_bitcoin/serialization" }
serialization_derive = { path = "../mm2_bitcoin/serialization_derive" }
sia-rust = { git = "https://github.com/KomodoPlatform/sia-rust", rev = "9f188b80b3213bcb604e7619275251ce08fae808", optional = true }
spv_validation = { path = "../mm2_bitcoin/spv_validation" }
sha2.workspace = true
sha3.workspace = true
utxo_signer = { path = "utxo_signer" }
# using the same version as cosmrs
tendermint-rpc.workspace = true
tokio-tungstenite-wasm = { workspace = true, features = ["rustls-tls-native-roots"]}
url.workspace = true
uuid.workspace = true 
# One of web3 dependencies is the old `tokio-uds 0.1.7` which fails cross-compiling to ARM.
# We don't need the default web3 features at all since we added our own web3 transport using shared HYPER instance.
web3 = { workspace = true, default-features = false }
zbase32.workspace = true
zcash_client_backend.workspace = true
zcash_extras.workspace = true
zcash_primitives.workspace = true 

[target.'cfg(target_arch = "wasm32")'.dependencies]
blake2b_simd.workspace = true 
ff.workspace = true
futures-util.workspace = true
jubjub.workspace = true
js-sys.workspace = true
mm2_db = { path = "../mm2_db" }
mm2_metamask = { path = "../mm2_metamask" }
mm2_test_helpers = { path = "../mm2_test_helpers" }
time = { workspace = true, features = ["wasm-bindgen"] }
timed-map = { workspace = true, features = ["rustc-hash", "wasm"] }
tonic = { workspace = true, default-features = false, features = ["prost", "codegen", "gzip"] }
tower-service.workspace = true
wasm-bindgen.workspace = true
wasm-bindgen-futures.workspace = true
wasm-bindgen-test.workspace = true
web-sys = { workspace = true, features = ["console", "Headers", "Request", "RequestInit", "RequestMode", "Response", "Window"] }
zcash_proofs = { workspace = true, features = ["local-prover"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
dirs.workspace = true
bitcoin.workspace = true
hyper = { workspace = true, features = ["client", "http2", "server", "tcp"] }
hyper-rustls = { workspace = true, default-features = false, features = ["http1", "http2", "webpki-tokio"] }
lightning.workspace = true
lightning-background-processor.workspace = true
lightning-invoice.workspace = true
lightning-net-tokio.workspace = true
rust-ini.workspace = true
rustls = { workspace = true, features = ["dangerous_configuration"] }
secp256k1v24.workspace = true
timed-map = { workspace = true, features = ["rustc-hash"] }
tokio.workspace = true
tokio-rustls.workspace = true
tonic = { workspace = true, features = ["codegen", "prost", "gzip", "tls", "tls-webpki-roots"] }
webpki-roots.workspace = true
zcash_client_sqlite.workspace = true 
zcash_proofs = { workspace = true, features = ["local-prover", "multicore"] }

[target.'cfg(windows)'.dependencies]
winapi.workspace = true

[dev-dependencies]
mm2_test_helpers = { path = "../mm2_test_helpers" }
mocktopus.workspace = true
mm2_p2p = { path = "../mm2_p2p", features = ["application"] }
ff.workspace = true
jubjub.workspace = true
reqwest.workspace = true

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wagyu-zcash-parameters.workspace = true 

[build-dependencies]
prost-build.workspace = true
tonic-build.workspace = true
