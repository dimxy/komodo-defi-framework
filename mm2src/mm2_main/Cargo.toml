# Support for split-debuginfo [should eventually](https://github.com/rust-lang/rust/issues/34651) land,
# hopefully giving us an out-of-the-box way to separate the code from the debugging information.
# We should use the "objcopy --only-keep-debug" and "add-symbol-file" meanwhile
# and separating stack tracing into raw trace and symbolication parts.

[package]
name = "mm2_main"
version = "0.1.0"
edition = "2018"

[lib]
path = "src/mm2.rs"
doctest = false

[features]
custom-swap-locktime = [] # only for testing purposes, should never be activated on release builds.
native = [] # Deprecated
track-ctx-pointer = ["common/track-ctx-pointer"]
zhtlc-native-tests = ["coins/zhtlc-native-tests"]
run-docker-tests = ["coins/run-docker-tests"]
default = []
trezor-udp = ["crypto/trezor-udp"] # use for tests to connect to trezor emulator over udp
run-device-tests = []
enable-sia = ["coins/enable-sia", "coins_activation/enable-sia"]
sepolia-maker-swap-v2-tests = []
sepolia-taker-swap-v2-tests = []
test-ext-api = ["trading_api/test-ext-api"]
new-db-arch = ["mm2_core/new-db-arch"] # A temporary feature to integrate the new db architecture incrementally

[dependencies]
async-std = { workspace = true, features = ["unstable"] }
async-trait.workspace = true
bitcrypto = { path = "../mm2_bitcoin/crypto" }
blake2.workspace = true
bytes.workspace = true
chain = { path = "../mm2_bitcoin/chain" }
chrono.workspace = true
cfg-if.workspace = true
coins = { path = "../coins" }
coins_activation = { path = "../coins_activation" }
common = { path = "../common" }
compatible-time.workspace = true
crc32fast.workspace = true 
crossbeam.workspace = true
crypto = { path = "../crypto" }
db_common = { path = "../db_common" }
derive_more.workspace = true
either.workspace = true
ethereum-types.workspace = true
enum_derives = { path = "../derives/enum_derives" }
enum-primitive-derive.workspace = true
futures01.workspace = true
futures = { workspace = true, features = ["compat", "async-await"] }
gstuff.workspace = true 
hash256-std-hasher.workspace = true
hash-db.workspace = true
hex.workspace = true
http.workspace = true
hw_common = { path = "../hw_common" }
itertools.workspace = true
kdf_walletconnect = { path = "../kdf_walletconnect" }
keys = { path = "../mm2_bitcoin/keys" }
lazy_static.workspace = true
# ledger = { path = "../ledger" }
libc.workspace = true
mm2_core = { path = "../mm2_core" }
mm2_err_handle = { path = "../mm2_err_handle" }
mm2_event_stream = { path = "../mm2_event_stream" }
mm2_gui_storage = { path = "../mm2_gui_storage" }
mm2_io = { path = "../mm2_io" }
mm2_libp2p = { path = "../mm2_p2p", package = "mm2_p2p" }
mm2_metrics = { path = "../mm2_metrics" }
mm2_net = { path = "../mm2_net"}
mm2_number = { path = "../mm2_number" }
mm2_rpc = { path = "../mm2_rpc", features = ["rpc_facilities"] }
mm2_state_machine = { path = "../mm2_state_machine" }
trading_api = { path = "../trading_api" }
num-traits.workspace = true
parity-util-mem.workspace = true
parking_lot = { workspace = true, features = ["nightly"] }
primitives = { path = "../mm2_bitcoin/primitives" }
primitive-types.workspace = true
prost.workspace = true
rand = { workspace = true, features = ["std", "small_rng"] }
rand6 = { version = "0.6", package = "rand" }
rmp-serde.workspace = true
rpc = { path = "../mm2_bitcoin/rpc" }
rpc_task = { path = "../rpc_task" }
script = { path = "../mm2_bitcoin/script" }
secp256k1 = { workspace = true, features = ["rand"] }
serde.workspace = true
serde_json = { workspace = true, features = ["preserve_order", "raw_value"] }
serde_derive.workspace = true
ser_error = { path = "../derives/ser_error" }
ser_error_derive = { path = "../derives/ser_error_derive" }
serialization = { path = "../mm2_bitcoin/serialization" }
serialization_derive = { path = "../mm2_bitcoin/serialization_derive" }
spv_validation = { path = "../mm2_bitcoin/spv_validation" }
sp-runtime-interface.workspace = true
sp-trie.workspace = true
trie-db.workspace = true
trie-root.workspace = true
uuid.workspace = true 

[target.'cfg(target_arch = "wasm32")'.dependencies]
# TODO: Removing this causes `wasm-pack` to fail when starting a web session (even though we don't use this crate).
# Investigate why.
instant = { workspace = true, features = ["wasm-bindgen"] }
js-sys.workspace = true
mm2_db = { path = "../mm2_db" }
mm2_test_helpers = { path = "../mm2_test_helpers" }
timed-map = { workspace = true, features = ["rustc-hash", "wasm"] }
wasm-bindgen.workspace = true
wasm-bindgen-futures.workspace = true
wasm-bindgen-test.workspace = true
web-sys = { workspace = true, features = ["console"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
dirs.workspace = true
futures-rustls.workspace = true
hyper = { workspace = true, features = ["client", "http2", "server", "tcp"] }
rcgen.workspace = true
rustls = { workspace = true, default-features = false }
rustls-pemfile.workspace = true
timed-map = { workspace = true, features = ["rustc-hash"] }
tokio = { workspace = true, features = ["io-util", "rt-multi-thread", "net", "signal"] }

[target.'cfg(windows)'.dependencies]
winapi.workspace = true

[dev-dependencies]
coins = { path = "../coins", features = ["for-tests"] }
coins_activation = { path = "../coins_activation", features = ["for-tests"] }
common = { path = "../common", features = ["for-tests"] }
mm2_test_helpers = { path = "../mm2_test_helpers" }
trading_api = { path = "../trading_api", features = ["for-tests"] }
mocktopus.workspace = true
testcontainers.workspace = true
web3 = { workspace = true, default-features = false, features = ["http-rustls-tls"] }
ethabi.workspace = true
rlp.workspace = true
ethcore-transaction.workspace = true
rustc-hex.workspace = true
sia-rust.workspace = true
url.workspace = true

[build-dependencies]
chrono.workspace = true
gstuff.workspace = true
prost-build = { version = "0.12", default-features = false }
regex.workspace = true

